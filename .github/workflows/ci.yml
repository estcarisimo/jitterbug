name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-new.txt
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 src/jitterbug --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/jitterbug --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check src/jitterbug
    
    - name: Sort imports check with isort
      run: |
        isort --check-only src/jitterbug
    
    - name: Type check with mypy
      run: |
        mypy src/jitterbug
      continue-on-error: true  # MyPy can be strict, don't fail CI
    
    - name: Test with pytest
      run: |
        pytest --cov=jitterbug --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-dependencies:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deps: [
          "minimal",
          "ruptures", 
          "torch",
          "influx",
          "all"
        ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ "${{ matrix.deps }}" = "minimal" ]; then
          pip install -e .
        elif [ "${{ matrix.deps }}" = "all" ]; then
          pip install -e ".[all]"
        else
          pip install -e ".[${{ matrix.deps }}]"
        fi
    
    - name: Test basic functionality
      run: |
        python examples/test_new_implementation.py

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          jitterbug/jitterbug:latest
          jitterbug/jitterbug:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}